<?php

namespace Makm\Tasks\Actions;

use PHPUnit\Framework\TestCase;

class ActionAbstractTestClass extends ActionAbstract
{

    protected $requiredUse = array('object');
    protected $requiredSerialize = array('param1', 'param2');

    protected function executeConstruction()
    {
        return $this->object;
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-08-26 at 15:59:10.
 */
class ActionAbstractTest extends TestCase
{

    /**
     * @var ActionAbstract
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ActionAbstractTestClass;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Makm\Tasks\Actions\ActionAbstract::__get
     * @todo   Implement test__get().
     * @todo   Implement test__set().
     */
    public function testGetSet()
    {
        $anyvalue = rand(0, 1000);
        $this->object->existvalue = $anyvalue;
        $this->assertEquals($this->object->existvalue, $anyvalue);
    }

    /**
     * @covers Makm\Tasks\Actions\ActionAbstract::__get
     * @expectedException     \Exception
     * @todo   Implement test__get().
     */
    public function test__get__set_fault()
    {
//        $this->setExpectedException('\Exception');
        $this->object->nothing;
    }



    /**
     * @covers Makm\Tasks\Actions\ActionAbstract::execute
     * @expectedException     \Exception
     */
    public function testExecuteFault1()
    {
        $this->setUp();
        //needed params not setted
        $result = $this->object->execute();
    }

    /**
     * @covers Makm\Tasks\Actions\ActionAbstract::execute
     * @expectedException     \Exception
     */
    public function testExecuteFault2()
    {
        $this->setUp();
        //needed for serialize params not setter
        $this->object->execute(array('object' => new \stdClass));
    }

    /**
     * @covers Makm\Tasks\Actions\ActionAbstract::execute
     * @todo   Implement testExecute().
     */
    public function testExecute()
    {
        $this->setUp();
//needed for serialize params not setter 
        $result = $this->object->execute(array('object' => new \stdClass, 'param1' => 1,
            'param2' => 2));
        $this->assertInstanceOf('stdClass', $result);
    }

}
