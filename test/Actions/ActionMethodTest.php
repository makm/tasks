<?php

namespace Makm\Tasks\Actions;

use PHPUnit\Framework\TestCase;

class testClassForObj1
{

    private $a = 6;

    public function doIt($a, $b)
    {
        return ($this->a + $a) * $b;
    }

}

class testClassForObj2
{

    public function doIt($a, $b)
    {
        return $a * $b;
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-04-27 at 14:40:18.
 */
class ActionMethodTest extends TestCase
{

    /**
     * @var ActionMethod
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ActionMethod;
    }

    /**
     * @expectedException     \RuntimeException
     */
    public function testSetVar()
    {
        $this->setUp();
        $this->object->setMethod('doIt')->setParams(['a' => 5, 'b' => 6]);
        $this->object->setMethod('doIt'); //set Method  again in wrong  behaviour!!
    }

    /**
     * @covers ActionMethod
     */
    public function testExecute()
    {
        /* */
        $this->setUp();
        $obj1 = new testClassForObj1();
        $params = ['a' => 5, 'b' => 6];
        $result = $this->object->setObject($obj1)
            ->setMethod('doIt')
            ->setParams($params)
            ->execute()
        ;
        $this->assertEquals(66, $result);

        //reset 
        $this->setUp();

        $obj2 = new testClassForObj2();
        $params = ['a' => 3, 'b' => 4];
        $result = $this->object->setObject($obj2)
            ->setMethod('doIt')
            ->setParams($params)
            ->execute()
        ;
        $this->assertEquals(12, $result);
    }

    /**
     * @expectedException \RuntimeException
     */
    public function testExecuteFault()
    {
        $this->setUp();
        $obj = new testClassForObj1();
        $this->object->setObject($obj);
        $this->object->execute();
    }

    /**
     * test sleep for serialize
     * @expectedException     \RuntimeException
     */
    public function testSerializeFault()
    {
        \serialize($this->object);
    }

    /**
     * @todo   Implement testSerializeUniversalize().
     */
    public function testSerializeUniversalize()
    {
        $this->setUp();
        $params = ['a' => 5, 'b' => 4];
        $this->object->setMethod('doIt')->setParams($params);
        $obj = new testClassForObj1();
        //can't execute
        $this->assertFalse($this->object->completedParamsForExecute());
        //can Serialize
        $this->assertTrue($this->object->completedParamsForSerialize());
        //then can execute
        $this->object->setObject($obj);
        $this->assertTrue($this->object->completedParamsForExecute());

        //serialize, then unserialize
        $actionString = \serialize($this->object);
        $unserAction = \unserialize($actionString);

        //and use
        $this->assertInstanceOf(__NAMESPACE__ . '\ActionMethod', $unserAction);
        //can Serialize again
        $this->assertTrue($this->object->completedParamsForSerialize());
        //but can't execute (serialize unser all used varibles)
        $this->assertFalse($this->object->completedParamsForExecute());
        $result = $unserAction->setObject($obj)->execute();
        $this->assertEquals(44, $result);
    }

    /**
     * @expectedException   \RuntimeException
     */
    public function testSerializeUnserializeFault()
    {

        $this->setUp();
        $params = ['a' => 5, 'b' => 4];
        $obj = new testClassForObj1();
        $this->object->setMethod('doit')->setParams($params)->setObject($obj);
        //$this->assertTrue($this->object->completedParamsForExecute());

        $actionString = \serialize($this->object);

        //echo $actionString;
        //then unserialize
        $unserAction = \unserialize($actionString);
        //$this->assertFalse($this->object->completedParamsForExecute());
        $unserAction->execute();
    }

}
