<?php

namespace Makm\Tasks\TimesControl;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-08-14 at 17:48:33.
 */
class CronedTest extends TestCase
{
    /**
     * @var Croned
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Croned;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Makm\Tasks\Croned::setup
     * @todo   Implement testSetup().
     */
    public function testSetup()
    {
        $this->object->resetScheme();
        $setupOptions = [Croned::MINUTES => [Croned::CONCRETE => 10]];
        $this->object->setup($setupOptions);
        //check
        $scheme = $this->object->getWhenScheme();
        $this->assertEquals([Croned::MINUTES => [Croned::CONCRETE => 10]],
            $scheme);
    }

    /**
     * @covers Makm\Tasks\Croned::whenConcrete
     * @todo   Implement testWhenConcrete().
     */
    public function testWhenConcrete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Makm\Tasks\Croned::whenEach
     * @todo   Implement testWhenEach().
     */
    public function testWhenEach()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Makm\Tasks\Croned::resetScheme
     * @todo   Implement testResetScheme().
     */
    public function testResetScheme()
    {
        $this->object->whenConcrete(5, Croned::SECONDS);

        //reset ?
        $this->object->resetScheme();
        $this->assertEquals($this->object->getWhenScheme(), []);
    }

    /**
     * @covers Makm\Tasks\Croned::getWhenScheme
     * @todo   Implement testGetWhenScheme().
     */
    public function testGetWhenScheme()
    {
        $this->assertInternalType('array', $this->object->getWhenScheme());
    }

    /**
     * @covers Makm\Tasks\Croned::isNow
     * @todo   Implement testIsNow().
     */
    public function testIsNow()
    {
        //Concrete Time!
        $this->object->resetScheme();
        $time = strtotime('2012-10-02 14:55:00');
        $this->assertTrue($this->object->isNow($time));
        //at 14 hours
        $this->object->whenConcrete(14, Croned::HOURS);
        $this->assertTrue($this->object->isNow($time));
        //is false
        $this->object->whenConcrete(rand(0, 13), Croned::HOURS);
        $this->assertFalse($this->object->isNow($time));
        $this->object->resetScheme();
        //at 14:55
        $this->object->resetScheme();
        $this->object->whenConcrete(14, Croned::HOURS);
        $this->object->whenConcrete(55, Croned::MINUTES);
        $this->assertTrue($this->object->isNow($time));
        $this->object->whenConcrete(rand(1, 54), Croned::MINUTES);
        $this->assertFalse($this->object->isNow($time));

        //Each periods 5 minutes
        $time = strtotime('2012-10-02 14:55:00');
        $this->object->resetScheme();
        $this->object->whenEachTime(5, Croned::MINUTES);
        $this->assertTrue($this->object->isNow($time));
        $this->object->whenEachTime(6, Croned::MINUTES);
        $this->assertFalse($this->object->isNow($time));

        //Each 6 day od month
        $this->object->resetScheme();
        $time = strtotime('2012-10-06 14:55:00');
        $this->object->whenEachTime(6, Croned::DAYMONTH);
        $this->assertTrue($this->object->isNow($time));
        $time = strtotime('2012-10-12 14:55:00');
        $this->assertTrue($this->object->isNow($time));
        //WRONG time!!!
        $time = strtotime('2012-10-13 14:55:00');
        $this->assertFalse($this->object->isNow($time));


        //Each 3 hours
        $this->object->resetScheme();
        $this->object->whenEachTime(3, Croned::HOURS);
        $time = strtotime('2012-10-06 15:55:00');
        $this->assertTrue($this->object->isNow($time));
        $time = strtotime('2012-10-12 21:55:00');
        $this->assertTrue($this->object->isNow($time));
        //WRONG time!!!
        $time = strtotime('2012-10-13 14:55:00');
        $this->assertFalse($this->object->isNow($time));
    }

}
