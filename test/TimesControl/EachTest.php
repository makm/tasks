<?php

namespace Makm\Tasks\TimesControl;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-08-17 at 14:16:36.
 */
class EachTest extends TestCase
{

    /**
     * @var Each
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Each();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Makm\Tasks\TimesControl\Each::setPeriod
     * @todo   Implement testSetPeriod().
     */
    public function testSetPeriod()
    {
        $this->object->setPeriod(11);
        $this->assertEquals(11, $this->object->getPeriodInSeconds());
        $this->object->setPeriod(5, Each::HOURS);
        $this->assertEquals(5 * 3600, $this->object->getPeriodInSeconds());
    }

    /**
     * @covers Makm\Tasks\TimesControl\Each::resetScheme
     * @todo   Implement testResetScheme().
     */
    public function testResetScheme()
    {
        $this->object->setup(111);
        $this->object->resetScheme();
        $this->assertNull($this->object->getPeriodInSeconds());
    }

    /**
     * @covers Makm\Tasks\TimesControl\Each::setup
     * @todo   Implement testSetup().
     */
    public function testSetup()
    {
        $this->object->setup(array('value' => 11));
        $this->assertEquals(11, $this->object->getPeriodInseconds());
        $this->object->resetScheme();
        $this->object->setup(120);
        $this->assertEquals(120, $this->object->getPeriodInseconds());
        $this->object->resetScheme();
        $this->object->setup(array('value' => 2, 'unit' => Each::HOURS));
        $this->assertEquals(2 * 3600, $this->object->getPeriodInseconds());
    }

    /**
     * @covers Makm\Tasks\TimesControl\Each::isNow
     * @todo   Implement testIsNow().
     */
    public function testIsNow()
    {
        $this->object->resetScheme();
        //Each min
        $this->object->setPeriod(1, Each::MINUTES);
        $time = strtotime('2012-10-02 14:55:00');
        $this->assertTrue($this->object->isNow($time));
        $time = strtotime('2012-10-02 14:55:40');
        $this->assertFalse($this->object->isNow($time));
    }

}
