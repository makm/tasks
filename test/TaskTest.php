<?php

namespace Makm\Tasks;

use PHPUnit\Framework\TestCase;

/**
 * Create class for replace fabric methods configAction,configTimesControl
 */
class TaskTestClass extends Task
{

    static $actionObjectMock = null;
    static $timesControlObjectMock = null;

    public function configAction($actionName, $params = array())
    {
        $this->setAction(static::$actionObjectMock);
        return $this;
    }

    public function configTimesControl($actionName, $params = array())
    {
        $this->setTimesControl(static::$timesControlObjectMock);
        return $this;
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-08-17 at 16:00:58.
 */
class TaskTest extends TestCase
{

    /**
     * @var Task
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //create Mock for configAction,configTimesControl
        TaskTestClass::$actionObjectMock = $this->getMockBuilder('Makm\Tasks\Actions\ActionAbstract')
                ->setMethods(array('setObject', 'setMethod', 'setParams', 'execute'))
                ->getMockForAbstractClass();

        TaskTestClass::$timesControlObjectMock = $this->getMockForAbstractClass('\Makm\Tasks\TimesControl\TimesControlAbstract');

        $this->object = new TaskTestClass;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Makm\Tasks\Task::ttlExpired
     * @todo   Implement testTtlExpired().
     */
    public function testTtlExpired()
    {
        //$this->object->setTTL(false);
        //$this->assertFalse($this->object->ttlExpired(time("now")));
        //must live
        $this->object->setTTL(20);
        //10 seconds after create  
        $relativeTime = $this->object->getCreatedTime()->getTimestamp() + 2;
        //false, must be actual
        $this->assertFalse($this->object->ttlExpired($relativeTime));


        //must die
        $this->object->setTTL(2);
        //5 seconds after create  
        $relativeTime = $this->object->getCreatedTime()->getTimestamp() + 5;
        $this->assertTrue($this->object->ttlExpired($relativeTime));

        //must die
        $this->object->setTTL(2);
        //5 seconds after create  
        $relativeTime = $this->object->getCreatedTime()->getTimestamp() + 500;
        $this->assertTrue($this->object->ttlExpired($relativeTime));

        //create time some more of current time,
        //must be true, becouse Task was not born
        //если вышло так что время создания больше текущего то 
        //должно венуться True т.е ТАкс еще не родился
        $this->object->setTTL(100);
        $relativeTime = $this->object->getCreatedTime()->getTimestamp() - 500;
        $this->assertFalse($this->object->ttlExpired($relativeTime));


        $this->object->setTTL(false);
    }

    /**
     * @covers Makm\Tasks\Task::donow
     */
    public function testDonow()
    {
        //How to use
        //пример использования Как использовать 
        //like ActionMethod
        TaskTestClass::$actionObjectMock->expects($this->once())->method('setObject')->will($this->returnSelf());
        TaskTestClass::$actionObjectMock->expects($this->once())->method('setMethod')->will($this->returnSelf());
        TaskTestClass::$actionObjectMock->expects($this->once())->method('setParams')->will($this->returnSelf());
        TaskTestClass::$actionObjectMock->expects($this->once())->method('execute')->will($this->returnValue(6));

        //like TimesControl
        TaskTestClass::$timesControlObjectMock->expects($this->any())->method('isNow')->will($this->returnValue(true));

        $this->object->configAction('method')
                ->configTimesControl('each',
                        array('value' => 1, 'unit' => TimesControl\Croned::SECONDS))
                ->getAction()
                ->setObject(new \stdClass())
                ->setMethod('doitnow')
                ->setParams(array('a' => 2, 'b' => 3));

        $this->assertTrue($this->object->donow());
        $this->assertEquals($this->object->getLastResult(), 6);

        //check  Expired  TTL again 
        $this->object->setTTL(10);
        $relativeTime = $this->object->getCreatedTime()->getTimestamp() + 1000;
        $this->assertTrue($this->object->ttlExpired($relativeTime));
        
        //try to Do
        $this->assertFalse( $this->object->donow(array(), $relativeTime));
    }

}
