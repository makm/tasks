<?php

namespace Makm\Tasks;

use PHPUnit\Framework\TestCase;

class StorageTestClass extends Storage
{
    public static $storageAdapterMock = null;

    protected function getStorageAdapter()
    {
        return self::$storageAdapterMock;
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-08-25 at 17:08:36.
 */
class StorageTest extends TestCase
{

    /**
     * @var Storage
     */
    protected $object;
    protected $taskMock;
    protected $storageAdapterMock;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->storageAdapterMock = StorageTestClass::$storageAdapterMock = $this->getMockForAbstractClass(StorageAdapters\StorageAdapterAbstract::class);


        //create mock ot Task object
        $this->taskMock = $this->createMock(Task::class);

        $this->object = new StorageTestClass;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @expectedException \RuntimeException
     */
    public function testConfigurateAdapter()
    {
        $this->object->configureAdapter('NotFountAdapter', array());
    }

    /**
     * @covers Makm\Tasks\Storage::set
     */
    public function testSet()
    {
        $this->storageAdapterMock->expects($this->once())->method('set')
                ->will($this->returnValue(true));
        //
        $result = $this->object->set('testgroup', 'testkey', $this->taskMock);
        $this->assertTrue($result);
    }

    /**
     * @covers Makm\Tasks\Storage::get
     */
    public function testGet()
    {
        //Object exist
        $this->storageAdapterMock->expects($this->once())->method('get')
                ->will($this->returnValue($this->taskMock));
        //
        $task = $this->object->get('testgroup', 'testkey');

        $this->assertInstanceOf('\Makm\Tasks\Task', $task);
    }

    /**
     * @covers Makm\Tasks\Storage::get
     */
    public function testGetNull()
    {
        $this->storageAdapterMock->expects($this->once())->method('get')
                ->will($this->returnValue(false));
        //
        $taskNull = $this->object->get('testgroup', 'notfountask');
        $this->assertNull($taskNull);
    }

    /**
     * @covers Makm\Tasks\Storage::del
     */
    public function testDel()
    {
        $this->storageAdapterMock->expects($this->at(0))->method('del')
                ->will($this->returnValue(true));
        $this->storageAdapterMock->expects($this->at(1))->method('del')
                ->will($this->returnValue(false));
        //
        $result = $this->object->del('testgroup', 'testkey');
        $this->assertTrue($result);
        $result = $this->object->del('testgroup', 'testkey');
        $this->assertFalse($result);
    }

    /**
     * @covers Makm\Tasks\Storage::getInGroup
     */
    public function testGetInGroup()
    {
        $keysInGroup = array(
            'task1' => $this->taskMock,
            'task2' => $this->taskMock,
            'task3' => $this->taskMock,
            'task4' => $this->taskMock,
        );

        $this->storageAdapterMock->expects($this->once())->method('getInGroup')
                ->will($this->returnValue($keysInGroup));
        $resultList = $this->object->getInGroup('testgroup');
        $this->assertInternalType('array', $resultList);
    }

    /**
     * @covers Makm\Tasks\Storage::getInGroup
     */
    public function testGetInGroupNotFounded()
    {
        $adapterKeysInGroup = array();

        $this->storageAdapterMock->expects($this->once())->method('getInGroup')
                ->will($this->returnValue($adapterKeysInGroup));
        $resultList = $this->object->getInGroup('testgroup');
        $this->assertInternalType('array', $resultList);
        $this->assertCount(0, $resultList);
    }

}
